
/*
 * Editor client script for DB table user
 * Automatically generated by http://editor.datatables.net/generator
 */

(function($){

$(document).ready(function() {
	var editor = new $.fn.dataTable.Editor( {
		"ajax": "/table.user.php",
		"table": "#user",
		"fields": [
			{
				"label": "y\/n",
				"name": "driver_daily_availability.YN",
				"type": "select",
				"ipOpts": [
					{
						"label": "Y",
						"value": "Y"
					},
					{
						"label": "N",
						"value": "N"
					}
				],
				"default" : "N"
			},
			{
				"label": "DR#",
				"name": "UserId",
				"type": "text"
			},
			{
				"label": "FirstName",
				"name": "person_name.FirstName",
				"type": "text"
			},
			{
				"label": "LastName",
				"name": "person_name.LastName",
				"type": "text"
			},
			{
				"label": "hours",
				"name": "driver_daily_availability.AvailableHours",
				"type": "text"
			}
		]
	} );

	$('#user').dataTable( {
		"dom": "Tfrtip",
		"ajax": "/table.user.php",
		"jQueryUI" : true,
		"pageLength" : 100,
		"columns": [
			{
				"data": "driver_daily_availability.YN"
			},
			{
				"data": "users.UserId"
			},
			{
				render: function(data,type,row,meta) {
					return row.person_name.FirstName + ' ' + row.person_name.LastName;
				}
			},
			{
				"data": "driver_availability.StartTime",
				render: function(data,type,row,meta) {
					return to12hour(data) + ' - ' + to12hour(row.driver_availability.EndTime);
				}
			},
			{
				"data" : "driver_settings.ContactPreference",
			},
			{
				render: function(data,type,row,meta) {
					return row.driver_settings.HoursPerTime + 
						(row.driver_settings.HoursTimeUnit == 'Day' ? 'd' :
						  (row.driver_settings.HoursTimeUnit =='Week' ? 'w' : ''));
				}
			},
			{
				render: function(data,type,row,meta) {
					return row.driver_settings.DaysPerTime + 
						(row.driver_settings.DaysTimeUnit == 'Day' ? 'd' :
						  (row.driver_settings.DaysTimeUnit =='Week' ? 'w' : ''));
				}
			},
			{
				"data": "driver_availability.EndTime",
				"bVisible": false
			},
			{
				"data": "driver_availability.DayOfWeek",
				"bVisible": false
			},
			{
				render: function(data,type,row,meta) {
					var i = 0; var found = false;
					for(i = 0; i < row.phone.length; i++) if(row.phone[i].PhoneType == 'MOBILE') { found = true; break; }
					if(found)	return row.phone[i].PhoneNumber;
					else return '';
				},
				className: 'nowrapcell'
			},
			{
				render: function(data,type,row,meta) {
					var i = 0; var found = false;
					for(i = 0; i < row.phone.length; i++) if(row.phone[i].PhoneType == 'HOME') { found = true; break; }
					if(found)	return row.phone[i].PhoneNumber;
					else return '';
				},
				className: 'nowrapcell'
			},
			{
				render: function(data,type,row,meta) {
					var i = 0; var found = false;
					for(i = 0; i < row.phone.length; i++) if(row.phone[i].PhoneType == 'WORK') { found = true; break; }
					if(found)	return row.phone[i].PhoneNumber;
					else return '';
				},
				className: 'nowrapcell'
			},
			{
				data: 'driver_settings.ServiceDog'
			},
			{
				data: 'driver_settings.OtherNotes'
			}
		],
		"tableTools": {
			"sRowSelect": "os",
			"aButtons": [

			]
		}
	} );
	
	$('#user').on( 'click', 'tbody td', function (e) {
        editor.inline( this );
   } );
   
  checkDate = $.datepicker.formatDate('DD',new Date());
  $('#datePicker').val(new Date().toDateInputValue());
  $('#datePicker').on('input',function(e) {
  	checkDate = $.datepicker.formatDate('DD',new Date(e.target.value));
  	table = $('#user').DataTable();
  	table.draw();
  });
  
  function doDateFilter( oSettings, aData, iDataIndex ) {
					if(aData[8] == checkDate) return true;
					return false;    		
	}
  
	$.fn.dataTableExt.afnFiltering.push(doDateFilter);
  
} );

}(jQuery));

Date.prototype.toDateInputValue = (function() {
    var local = new Date(this);
    local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
    return local.toJSON().slice(0,10);
});

function to12hour(str) {
	var t = String(str).split(':');
	return (parseInt(t[0],10) > 12 ? parseInt(t[0],10)-12 : (t[0] == '00' ? '12' : parseInt(t[0],10)))+':'+t[1]+(parseInt(t[0],10) >= 12 ? 'pm' : 'am');
}